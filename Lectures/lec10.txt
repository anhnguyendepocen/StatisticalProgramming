0. Misc.1. Reading in from a file in C.2. R Cookbook, ch. 13.1 and 13.2.3. dnorm and change of variables.4. Matrices in C.5. Python and mySQL references.6. Bias in the sample SD.0. Misc.NO CLASS or OH TUE NOV 11, for Veteran's Day.Final projects.   Thu, Dec 41. LANIYONU, AYOBAMI STEPHEN .      ZHAO, YIBIAO .      2. CHOPRA, AKSHIT .      HUDLI, SHRINIDHI RAGHU .      3. RAZAEE, ZAHRA .      YU, XIAOLU .   BINGLING WANG. *** 4. KAMATH MANJESHWAR, AASHITH .      HU, XUE .      5. MEHRISH, RAGHAV .      SOSA, LUIS ANTONIO .      6. GAO, MEI .      QIU, WEICHAO .      7. LI, WEI .      JACOBSON, THOMAS ABRAM .   Tue, Dec 9 8. AHLUWALIA, PUNEET SINGH .      KUMAR, PRAPHULL .      9. BLACKBURN, TIMOTHY .      PATEL, RIKI .      10. PERITZ, LAUREN J .      KAPUR, SHIVIN .      11. KRISHNAMOORTHY, LAKSHMAN .      SHU, TIANMIN .      12. ZHANG, DACHENG .      MIN, SEUNGHYUN .      13. DUNN, BRETT RADCLIFFE .      BHATKHANDE, ASHWINI ASHOK .      14. CHEN, XUHUI .      RUSKIN, AMY SOFIA .        Thu, Dec 11 15. DALVI, HARSHAL GANESH .      NOH, YUREE . KHOLE, SHWETA. ***           16. VERMA, ANKUSH .      HO, MINH .      17. CHEN, LIULI .      HE, CENLIN .      18. HILL, MITCHELL KRUPIARZ .      YANG, JI .      19. FAN, WEIKANG .      YU, JINGZHI .      20. MINOCHA, AYUSH ARUN .      FARRUKH, ADINA .      LIU, YANG .HW4 is on the course website.1. Reading in from a file.You first need a file pointer  FILE *fp;FILE is a structure that holds information about the file. Use FILE * to pass the information around by reference.  fp = fopen(filename, mode);filename is a string that holds the name of the file on disk (including a path like /cs/course if necessary).mode is a string representing how you want to open the file. Most often you'll open a file for reading ("r") or writing ("w").In data.txt,  1  14  5  37  7  2  1  100In readin1.c,    #include <stdio.h>  #include <R.h>  #include <Rmath.h>  void readssq (int *n){    /* Read in the first n terms in "data.txt"    and compute the sum of squares.    Write the output to "output.txt" */    FILE *myfile1, *myfile2;    int i;    float a1, a2;        a2 = 0.0;    myfile1 = fopen("data.txt", "r");    myfile2 = fopen("output.txt", "w");    for(i = 0; i < *n; i++){	fscanf(myfile1, "%f", &a1);	a2 += pow(a1, 2);    }    fclose(myfile1);    Rprintf("The sum of squares is %f \n", a2);    fprintf(myfile2, "%f \n", a2);    fclose(myfile2);  }In R,    system("R CMD SHLIB readin1.c")    dyn.load("readin1.so")    a = .C("readssq",as.integer(5))The input file that we are opening for reading ("r") must already exist, but the output file we are opening for writing ("w") does not have to exist. If it doesn't, it will be created. If this output file does already exist, its previous contents will be thrown away and lost.Use "a" for append to write something to the end of a file without losing its contents.In fprintf,Integer values use %d,Floating point values, i.e. decimals, use %f,double precision numbers use %lf,Single characters use %c,Character strings use %s.2. R Cookbook ch 13.1 and 13.2.The main things I want to emphasize are optimize and optim.Use optimize(), p 335, to minimize a function of one variable.    f = function(x){exp((abs(x)-2.0))+(x-3)^2}  x = seq(-10,10,length=200)  y = f(x)  par(mfrow=c(1,2))  plot(x,y)  plot(x,y,ylim=c(min(y),min(y)+1))  c(1:200)[y == min(y)]  x[124]  x[123:125]  f(x[124])  g = optimize(f) ## doesn't work  g = optimize(f, lower=-10,upper=10)  gg$min is the minimum, and g$obj = f(g$min).Use optim(), p336, for functions of more than one variable. It uses a Newton-Raphson type method by default, and doesn't require you to give a range but you do need an initial guess.  f = function(x) 3+(x[1]-2.4)^2 + (x[2]-2.5)^2  guess1 = c(10,10)  g = optim(guess1,f)  g$par3. Brief review of dnorm and change of variables.Why does dnorm(x, sd = s) = dnorm(x/s, sd = 1)/s?dnorm(1.2, 0,5.7,0) = normal density with mean 0 and sd 5.7, at 1.2= dnorm(1.2/5.7, 0, 1, 0) / 5.7from change of variables formula in calculus.Let f be the std normal density.Integral from -inf to inf of f(x/b) dx = ?Let y = x/b. dy = dx/b. dx = b dy.So Integral from -inf to inf of f(x/b) dx = b * Integral of f(x)dx = b.So, divide by b to get a density g(x) = f(x/b).4. Matrices in C.You pretty much have to pass matrices in R to C as vectors.Matrices in R are actually stored as long vectors, with their dimensions as 2 attributes.However, you can pass the matrices just as you would vectors, with one caveat. The matrices are read column by column, not row by row!a = matrix(1:6,ncol=3,byrow=T)aa[1]a[2]a[3]a[1:6]In mymatrix.c,#include <R.h>#include <Rmath.h>void matmult (double *a, int *n1, int *m1,	      double *b, int *n2, int *m2,	      double *y){    int i,j,k;    double x;    double a1[*n1][*m1];    double b1[*n2][*m2];        for(j = 0; j < *m1; j++) {	for(i = 0; i < *n1; i++) {	    a1[i][j] = a[j * *n1 + i];	}    }        for(j = 0; j < *m2; j++) {	for(i = 0; i < *n2; i++) {	    b1[i][j] = b[j * *n2 + i];	}    }	        for(i = 0; i < *n1; i++) {	for(j = 0; j < *m2; j++) {	    x = 0.0;	    for(k = 0; k < *m1; k++) {		x += a1[i][k] * b1[k][j];	    }	    y[i* *m2 + j] = x;  // y[i][j] = x;	}    }}In R,    system("R CMD SHLIB mymatrix.c")    dyn.load("mymatrix.so")    a = matrix(1:6,ncol=3,byrow=T) ## or equivalently a = c(1,4,2,5,3,6)    b = matrix(1:12,ncol=4,byrow=T)    y = rep(0,8)    x = .C("matmult",as.double(a),as.integer(2),as.integer(3),as.double(b),as.integer(3),           as.integer(4),as.double(y))    y = matrix(x[[7]], ncol=4, byrow=T)    y    a %*% b    5. Python and mySQL references.For Python, a nice introduction is   http://www.rexx.com/~dkuhlman/python_101/python_101.html . There are many nearly equivalent online references. Another nice one is   http://wiki.python.org/moin/BeginnersGuideFor MySQL, a good reference is  King, T., Reese, G., Yarger, R., and Williams, H.E. (2002).  Managing and Using MySQL: Open Source SQL Databases for Managing Information   and Web Sites, 2nd ed. O'Reilly and Associates, Inc., Sebastopol, CA.  Or   Sams Teach Yourself SQL in 10 Minutes, http://www.amazon.com/dp/0672325675,and websites that you might like are  http://w3schools.com/php/php_mysql_intro.asp  http://www.tizag.com/mysqlTutorial or  http://www.keithjbrown.co.uk/vworks/mysql .6. Bias in the sample sd.Given n iid observations from some population with mean µ and variance sigma^2, it is well known (and not hard to show) that the sample variance s^2 = á (Xi - Xbar)^2 / (n-1) is an unbiased estimate of sigma^2.But is s an unbiased estimate of sigma? What is its bias?Suppose the population is uniform (0,1).If we were writing code to answer this question in R, we might do the following.  ## R code to calculate bias in the sample sd of n uniforms on (0,1),   ## where n goes from 2 to nmax=100, and for each such n,  ## we will generate n uniforms,   ## calculate the sample sd, and repeat m times, where m = 1000.  ## The true variance of U(0,1) = E(X^2) - [E(X)]^2 = 1/3 - 1/4 = 1/12,  ## so sigma = 1/sqrt(12).   nmax = 100  n = 2:nmax  m = 10000  bias2 = rep(0,99) ## to be general 99 should be changed to nmax-1  for(i in 1:99){    s = rep(0,m)    for(j in 1:m){      x = runif(n[i])      s[j] = sd(x)      }    bias2[i] = mean(s) - 1/sqrt(12)  cat(i," ")  }    plot(n,bias2,xlab="n",ylab="bias", ylim=c(-.003,.001),         main="bias in SD of n uniforms", type="l")  abline(h=0,lty=2)  ## There's a lot of scatter and noise, because m is so small. It's mostly noise.In sd2.c,#include <stdlib.h>#include <R.h>#include <Rmath.h>double sd2(double *x, int j) {    int i;    double a1, xbar;        xbar = 0.0;    for(i = 0; i < j; i++) {	xbar += x[i];    }    xbar = xbar / j;    a1 = 0.0;    for(i = 0; i < j; i++) {	a1 += pow(x[i] - xbar,2);    }    a1 = pow(a1/(j-1), 0.5);    return(a1);}double mean2(double *x, int j) {    int i;    double xbar;        xbar = 0.0;    for(i = 0; i < j; i++) {	xbar += x[i];    }    xbar = xbar / j;    return(xbar);}void bias3 (int *nmax, int *m, double *b){    /* The output will be b, the bias in the sd for each n,         from n=2 up to nmax. */    int i,j,k;    double x[*nmax];    double s[*m];        GetRNGstate();    for(i = 2; i < *nmax+1; i++){   	for(j = 0; j < *m; j++){	    for(k = 0; k < i; k++){		x[k] = runif(0,1);	    }	    s[j] = sd2(x, i);	}	b[i-1] = mean2(s, *m) - pow(12, -.5);        if(i/1000 == floor(i/1000)) Rprintf("%i ",i);    }    PutRNGstate();}In R,  system("R CMD SHLIB sd2.c")  dyn.load("sd2.so")  nmax = 100  m = 100000  a = .C("bias3",as.integer(nmax), as.integer(m),b = double(nmax))  bias1 = a$b  plot(c(2:nmax),bias1[2:nmax],xlab="n",ylab="bias",ylim=c(-.003,.001),         main="bias in SD of n uniforms", type="l")  abline(h=0,lty=2)Coming up.## Generalized additive models.## Making R packages.## Calling R from C.## C++.## Calling C++ from R.