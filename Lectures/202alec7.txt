1. Admin.2. R Cookbook ch. 11.3. C programming, mypi.c.4. dnorm in C.5. Sum of squared differences between observations in C.1. Admin.Submit hw before the due date. Hit the submit button.No office hours Tue Oct 28 because of the faculty retreat. Final projects.   Thu, Dec 41. LANIYONU, AYOBAMI STEPHEN .      ZHAO, YIBIAO .      2. CHOPRA, AKSHIT .      HUDLI, SHRINIDHI RAGHU .      3. RAZAEE, ZAHRA .      YU, XIAOLU .      4. KAMATH MANJESHWAR, AASHITH .      HU, XUE .      5. MEHRISH, RAGHAV .      SOSA, LUIS ANTONIO .      6. GAO, MEI .      QIU, WEICHAO .      7. LI, WEI .      JACOBSON, THOMAS ABRAM .        Tue, Dec 9 8. AHLUWALIA, PUNEET SINGH .      KUMAR, PRAPHULL .      9. BLACKBURN, TIMOTHY .      PATEL, RIKI .      10. PERITZ, LAUREN J .      KAPUR, SHIVIN .      11. KRISHNAMOORTHY, LAKSHMAN .      SHU, TIANMIN .      12. ZHANG, DACHENG .      MIN, SEUNGHYUN .      13. DUNN, BRETT RADCLIFFE .      BHATKHANDE, ASHWINI ASHOK .      14. CHEN, XUHUI .      RUSKIN, AMY SOFIA .        Thu, Dec 11 15. DALVI, HARSHAL GANESH .      NOH, YUREE .      16. VERMA, ANKUSH .      HO, MINH .      17. CHEN, LIULI .      HE, CENLIN .      18. HILL, MITCHELL KRUPIARZ .      YANG, JI .      19. FAN, WEIKANG .      YU, JINGZHI .      20. MINOCHA, AYUSH ARUN .      FARRUKH, ADINA .      LIU, YANG .Use the computer labs in BH 9413 if your computer doesn't seem to work with regard to running C in R.From a former student:"Some of us were working at getting R and C working, and I found a solution you may find useful. ÊWhen we were trying to run R CMD SHLIB, an error came back to the effect of 'gcc-4.2 file not found'. ÊIn this case, the executable was just /usr/bin/gcc, so we fixed it with a symlink by running the command 'sudo ln -s /usr/bin/gcc /usr/bin/gcc-4.2' at the terminal."For the final project, start looking for a dataset and dividing up tasks. Find a regression type dataset, where you have many independent observational units (e.g. people), and for each, you have 3 or 4 variables recorded, and where one is the sensible response variable. You can do regression and also analyze each variable individually.2. R Cookbook ch11.After today we will have covered all of ch. 1-11, and next weekwe will discuss ch. 13.1 and 13.2, but that's probably it for R Cookbook. The rest will be C and C++.lm, p269-285. lm(y ~ x), y = b0 + b1 x + epslm(y ~ u + v + w)fits y = b0 + b1 u + b2 v + b3 w + eps.lm(y ~ u + v + w + 0) for no intercept, b0.lm(y ~ u*v*w) for all interactions. See p279.y = b0 + b1u + b2v + b3w + b4uv + b5uw + b6vw + b7 uvw + e.To specify a particular interaction, use :.lm(y ~ u + v + w + u:v:w) for just the uvw term. See p280.This fits y = b0 + b1 u + b2 v + b3 w + b4 uvw + eps.p280, lm(y ~ (u+v+w)^i) for all order i interactions.   u = rnorm(10000)  v = rnorm(10000)  w = rnorm(10000)  x = rnorm(10000)  y = 10 + 20*u + 30*u*v + rnorm(1000,sd=.1)  j = lm(y ~ (u + v + w + x)^3)  summary(j)Use - to eliminate a term.   j = lm(y ~ (u + v + w + x)^3 - v:w:x - v)  summary(j)step, p281, to do stepwise regression, forward or backward.  k = step(j,direction="backward")AIC = Akaike's Information Criterion, lowest AIC is best fitting model.Assuming eps = iid Normal(mean 0, some variance sigma^2), can calculate the likelihood associated with a particular model and parameters.AIC = -2 log (likelihood) + 2p. Lower AIC is preferred.For comparing nested models, the difference in AIC is generally approximately chi square distributed.  summary(k)  k2 = step(lm(y ~ 1), direction="forward",     scope = ( ~ (u+v+w+x)^4), trace=0)  summary(k2)p285, I(u+v) for a term that actually just represents u+v. Similarly, I(u^2) for a term that is u^2, or I(u*v) for a column that is u*v.  k = lm(y ~ I(u*v*w))  k = lm(y ~ I(x^2 + x))p292, confint for confidence intervals.  confint(k2)p293, plot the residuals with plot(k2, which=1), and other plots with plot(k2).3. Approximate pi in C.In mypi.c,    #include <R.h>    #include <Rmath.h>    void pi2 (int *n, double *y){      int i;      double x[*n];      x[0] = 1.0;      y[0] = sqrt(6.0);      for(i = 1; i < *n; i++) {          x[i] = x[i-1] + 1.0 / ((i+1.0)*(i+1.0));          /* or x[i] = x[i-1] + 1.0 / pow(i+1.0,2.0); */          y[i] = sqrt(6.0 * x[i]);      }    }      In R,    system("R CMD SHLIB mypi.c")    dyn.load("mypi.so")    pi3 = function(n){		.C("pi2",as.integer(n), y = double(n))	}    b = pi3(1000000)    b$y[1000000]Note that you have to be incredibly careful in C when doing arithmetic between integers and non-integers.If instead of 1.0 / ((i+1.0)*(i+1.0));you do         1  / ((i+1.0)*(i+1.0));or            1.0 / (i+1.0)^2;crazy stuff happens.^ is a bitwise operator meaning "XOR", i.e. X^Y = 1 if X=1 or Y=1 but not both.    4. dnorm in C.You can access C versions of many basic R functions, including for instance dnorm(), rnorm(), etc.A nice reference is http://www.biostat.jhsph.edu/~bcaffo/statcomp/files/cprog3_ho.pdf .The syntax in C of dnorm is double dnorm(double x, double mu, double sigma, int give_log) in mydn.c,    #include <R.h>    #include <Rmath.h>    void norm2 (int *n, double *upper, double *bw, double *y){      int i;      double x, inc;      x = -1.0 * *upper;      inc = 2.0 * *upper / *n;      for(i = 0; i < *n; i++) {      y[i] = dnorm(x / *bw, 0,1,0);      x += inc;      }    }    In R,     system("R CMD SHLIB mydn.c")    dyn.load("mydn.so")    norm3 = function(n, u, b){		d = .C("norm2", as.integer(n), as.double(u), 		as.double(b), y = double(n))	d$y	}    b = 12.4    n = 100000    u = 5*b    a = norm3(n,u,b)    title2 = paste("normal density with sd ", as.character(b))    plot(seq(-u,u,length=n), a, type="l", main=title2,xlab="x", ylab="f(x)")5. Sum of squared differences between observations in C.In sumsq.c,	#include <R.h>	#include <Rmath.h>	void ss2 (double *x, int *n, double *y)	/* x will be the vector of data of length n,	   and y will be a vector of squared differences from obs i	   to the other n-1 observations.	*/	{		int i,j;		double a;		for(i = 0; i < *n; i++){			a = 0.0;			for(j=0; j < *n; j++){				a += pow(x[i] - x[j], 2);			}			y[i] = a;		}	}in R,	system("R CMD SHLIB sumsq.c")	dyn.load("sumsq.so")	sum3 = function(data2){		n = length(data2)		a = .C("ss2", as.double(data2), as.integer(n),			y=double(n))		a$y  ## or equivalently a[[3]]	}	b = c(1,3,4)        sum3(b)	n = c(100, 1000, 2000, 3000, 5000, 7000, 8000, 10000)	t2 = rep(0,8)	for(i in 1:8){	  b = runif(n[i])	  timea = Sys.time()	  d = sum3(b)	  timeb = Sys.time()	  t2[i] = timeb-timea	  cat(n[i]," ")	}	par(mfrow=c(1,2))	plot(n,t2,ylab="time (sec)")		## Now try the same thing in R, without C.		sum4 = function(data2){	  n = length(data2)	  x = rep(0,n)	  for(i in 1:n){	    for(j in 1:n){	      x[i] = x[i] + (data2[i] - data2[j])^2	      }	    }	  x	  }	b = c(1,3,4)        sum4(b)	n = c(1:8)*100	t3 = rep(0,8)	for(i in 1:8){	  b = runif(n[i])	  timea = Sys.time()	  d = sum4(b)	  timeb = Sys.time()	  t3[i] = timeb-timea	cat(n[i]," ")	}	plot(n,t3,ylab="time (sec)")